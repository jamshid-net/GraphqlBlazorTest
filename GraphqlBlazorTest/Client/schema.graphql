schema {
  query: EmployeeServiceQuery
  mutation: EmployeeServiceMutation
}

type EmployeeServiceQuery {
  employees: [Employee!]!
  generateUsers: Boolean!
  paginatedEmployees(skip: Int take: Int): PaginatedEmployeesCollectionSegment
}

type EmployeeServiceMutation {
  deleteEmployee(id: UUID!): Boolean!
  employeeById(id: UUID!): Employee!
  createEmployee(employee: EmployeeDtoInput!): Boolean!
}

"A segment of a collection."
type PaginatedEmployeesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [Employee!]
  totalCount: Int!
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

type Employee {
  id: UUID!
  fullName: String!
  birhDate: Date!
  picture: String!
  job: String!
  password: String!
  userName: String!
  roles: [String!]
}

scalar UUID

input EmployeeDtoInput {
  fullName: String!
  birhDate: Date!
  picture: String!
  job: String!
  password: String!
  userName: String!
  roles: [String!]
}

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date
@page "/employees";
@using GraphQL.Client.Abstractions;
@using GraphQL;
@using GraphqlBlazorTest.Shared;
@inject ProjectClient pclient;

<h3>Employee</h3>

@if (paginatedEmployees == null)
{
    <p><em>Loading...</em></p>
}
else
{



    <section style="margin-bottom: 10px">
        <input type="text" class="form-control" placeholder="Search by Employee by name"
        @bind-value="@SearchTerm" @bind-value:event="oninput" @onkeyup="(async ()=>await SearchingEmployeeByName())" />
    </section>
    <table class="table">
        <thead>
            <tr class="EmployeeFullname">
                <th @onclick="(()=>SortEmployee(x=> x.FullName))">Full name</th>
                <th @onclick="(()=>SortEmployee(x=> x.BirhDate))">Birth date</th>
                <th>Picture</th>
                <th @onclick="(()=>SortEmployee(x=> x.Job))">Job</th>
                <th><a role="button" href="createEmployee" class="btn btn-success">Add employee</a></th>
            </tr>

        </thead>
        <tbody>

            @foreach (var employee in paginatedEmployeesitems)
            {

                <tr>
                    <td>@employee.FullName</td>
                    <td>@employee.BirhDate</td>
                    <td>@employee.Picture</td>
                    <td>@employee.Job</td>
                    <td><button @onclick="(()=> DeleteEmployeeAsync(employee.Id))" class="btn btn-danger">Delete</button></td>
                </tr>
            }




        </tbody>
    </table>


    <nav aria-label="Page navigation example">
        <ul class="pagination">
           
            @for (int i = 0; i < (paginatedEmployees.TotalCount / 10 + 1); i++)
            {
                int pageNumber = i; // Create a local copy of i
                <li class="page-item"><a class="pageCursore page-link" @onclick="(()=> TakePaginatedEmployess(pageNumber* 10, 10))">@(i + 1)</a></li>
            }
           
        </ul>
    </nav>
}

<style>
    .EmployeeFullname th {
        cursor: pointer;
        user-select: none;
    }
    .pageCursore{
        cursor: pointer;
        user-select: none;
    }
</style>

@code {

    public string SearchTerm { get; set; }
    [Parameter]
    public EventCallback<string> OnSearchChanged { get; set; }

    IPaginatedEmployees_PaginatedEmployees? paginatedEmployees;

    IReadOnlyList<IPaginatedEmployees_PaginatedEmployees_Items>? paginatedEmployeesitems;

    bool sortToggle = true;

    private async Task SearchingEmployeeByName()
    {
        if (!string.IsNullOrEmpty(SearchTerm))
        {
            paginatedEmployeesitems = paginatedEmployeesitems?.Where(x=> x.FullName.ToLower().Contains(SearchTerm.ToLower())).ToList();

        }
        else
        {
            paginatedEmployeesitems = paginatedEmployeesitems?.ToList();
        }
        await Task.CompletedTask;
    }




    private async Task DeleteEmployeeAsync(Guid id)
    {
        await pclient.DeleteEmployee.ExecuteAsync(id);



    }

    protected override async Task OnInitializedAsync()
    {

        await TakePaginatedEmployess(0, 10);

    }

    private async Task TakePaginatedEmployess(int? skip, int? take)
    {
        var result = (await pclient.PaginatedEmployees.ExecuteAsync(skip, take))?.Data?.PaginatedEmployees;
        paginatedEmployees = result;
        paginatedEmployeesitems = paginatedEmployees?.Items;


    }


    private void SortEmployee<T>(Func<IPaginatedEmployees_PaginatedEmployees_Items, T> propertySelector)
    {
        if (sortToggle)
        {
            paginatedEmployeesitems = paginatedEmployeesitems?.OrderBy(propertySelector).ToList();
            sortToggle = false;
        }
        else
        {
            paginatedEmployeesitems = paginatedEmployeesitems?.OrderByDescending(propertySelector).ToList();
            sortToggle = true;
        }

    }




}